//
// Copyright (c) Uladzislau Nikalayevich <thenormalnij@gmail.com>. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for details.
//

#pragma once

#include "../libs/EASTL-forge1.51/string.h"
#include "../libs/EASTL-forge1.51/vector.h"

namespace SGG {
struct SoundCue {
    char pad[0x10];
};

using Justification = int8_t;
using VerticalJustification = int8_t;

class ComponentDataDef {
  public:
    bool mUseHover;
    bool mScaleWithOwner;
    bool mOpacityWithOwner;
    bool mLocationZWithOwner;
    bool mScaleWithZoom;
    bool mUseTooltipHeader;
    bool mUseTooltipFlavor;
    bool mAllowTooltipWhenInvisible;
    bool mUseLineFading;
    bool mUseArea;
    bool mUseTextArea;
    bool mAddTextArea;
    bool mUseableWhenFadedOut;
    bool mSelectedAnimationIsOverlay;
    bool mSelectedAnimationOnlyIfAnimFinished;
    bool mForceSelectOnClick;
    bool mForceDeselectOnClick;
    bool mSwallowClicks;
    bool mFreeFormSelectable;
    bool mUseEmphasizedFont;
    bool mBlockEmphasizedFont;
    bool mGraft;
    bool mRemoveFormattingOnDisable;
    bool mAddColor;
    bool mScrollWithSelection;
    bool mFlipHorizontal;
    bool mFlipVertical;
    bool mAlwaysUpperCase;
    bool mLangJaUpperCase;
    bool mAlwaysLowerCase;
    bool mFlashText;
    bool mSelectOnMouseOver;
    bool mDeselectOnMouseOff;
    bool mSelectOnClick;
    bool mCauseCursorOcclusion;
    bool mUseInteractCursor;
    bool mPaneCursorScroll;
    bool mMouseWheelScroll;
    bool mAllowWrapping;
    float mX;
    float mY;
    eastl::basic_string<char, eastl::allocator_forge> mAttachTo;
    float mOffsetX;
    float mOffsetY;
    float mFlipOffsetXAxis;
    float mMinX;
    float mMaxX;
    float mMinY;
    float mMaxY;
    float mAngle;
    float mScale;
    float mScaleTarget;
    float mTextScale;
    float mTextSymbolScale;
    int mFontSize;
    float mLangCnScaleModifier;
    float mLangKoScaleModifier;
    float mLangJaScaleModifier;
    float mLangFrScaleModifier;
    float mLangItScaleModifier;
    float mLangDeScaleModifier;
    float mLangEsScaleModifier;
    float mLangPlScaleModifier;
    float mLangPtBrScaleModifier;
    float mLangRuScaleModifier;
    float mNonEnglishScaleModifier;
    eastl::basic_string<char, eastl::allocator_forge> mNonEnglishFont;
    float mTextOffsetX;
    float mTextOffsetY;
    float mHighlightOffsetX;
    float mHighlightOffsetY;
    eastl::basic_string<char, eastl::allocator_forge> mTooltipId;
    float mTooltipOffsetX;
    float mTooltipOffsetY;
    int mTooltipAreaOffsetY;
    int mTooltipAreaExtraHeight;
    float mScaleX;
    float mScaleY;
    float mWidth;
    float mHeight;
    bool mUseScissoring;
    float mDynamicLineScaleWidth;
    int mAreaOffsetX;
    int mAreaOffsetY;
    eastl::basic_string<char, eastl::allocator_forge> mGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mSelectedGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mAlternateGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mSelectedOnAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mSelectedOffAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mPressAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mDisabledAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mUnderCursorOnAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mUnderCursorOffAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mFadeOutAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mDisabledFadeOutAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mTopFadeOutAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mTopAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mSelectedOnTopAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mSelectedOffTopAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mPressTopAnimation;
    eastl::basic_string<char, eastl::allocator_forge> mDisabledTopAnimation;
    float mFreeFormSearchSuccessDistanceStep;
    float mFreeFormSearchFromOffsetX;
    float mFreeFormSearchFromOffsetY;
    uint8_t mGamepadSelectionStyle;
    eastl::basic_string<char, eastl::allocator_forge> mBackGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mFrontGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mFillGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mContainerGraphic;
    eastl::basic_string<char, eastl::allocator_forge> mDisplayNameId;
    eastl::basic_string<char, eastl::allocator_forge> mDescriptionId;
    eastl::basic_string<char, eastl::allocator_forge> mAlternateDisplayNameId;
    eastl::basic_string<char, eastl::allocator_forge> mHelpTextId;
    eastl::basic_string<char, eastl::allocator_forge> mAlternateHelpTextId;
    eastl::basic_string<char, eastl::allocator_forge> mFont;
    eastl::basic_string<char, eastl::allocator_forge> mVariableAutoFormat;
    eastl::basic_string<char, eastl::allocator_forge> mHighlightFormat;
    eastl::basic_string<char, eastl::allocator_forge> mAlternateTooltipFormat;
    eastl::basic_string<char, eastl::allocator_forge> mAlternateHighlightFormat;
    eastl::basic_string<char, eastl::allocator_forge> mFirstLetterFormat;
    eastl::basic_string<char, eastl::allocator_forge> mSelectionFormat;
    Justification mJustification;
    VerticalJustification mVerticalJustification;
    Justification mTextJustification;
    float mRed;
    float mGreen;
    float mBlue;
    float mAlpha;
    float mRedTarget;
    float mGreenTarget;
    float mBlueTarget;
    float mSelectedRed;
    float mSelectedGreen;
    float mSelectedBlue;
    float mSelectedAlpha;
    float mBackRed;
    float mBackGreen;
    float mBackBlue;
    float mBackAlpha;
    float mDimRed;
    float mDimGreen;
    float mDimBlue;
    float mDimAlpha;
    float mTextRed;
    float mTextGreen;
    float mTextBlue;
    float mTextAlpha;
    float mTextOutlineRed;
    float mTextOutlineGreen;
    float mTextOutlineBlue;
    float mSelectedTextRed;
    float mSelectedTextGreen;
    float mSelectedTextBlue;
    float mSelectedTextAlpha;
    float mSelectedScale;
    float mSelectedTextScale;
    float mDisabledTextRed;
    float mDisabledTextGreen;
    float mDisabledTextBlue;
    float mDisabledTextAlpha;
    float mOutlineThickness;
    float mLineSpacingTop;
    float mLineSpacingBottom;
    float mLineSpacingLeft;
    float mLineSpacingRight;
    float mLineDrawOffsetY;
    float mSpacing;
    float mSpacingX;
    float mSpacingY;
    float mScrollSpeed;
    float mMouseWheelScrollSpeed;
    float mAutoScrollDelay;
    float mAutoScrollSpeed;
    int mNumVisibleItems;
    int mDrawInFrontIndex;
    float mLeftMargin;
    float mTopMargin;
    SoundCue mMouseOverSound;
    SoundCue mSelectionSound;
    SoundCue mUnselectedSound;
    SoundCue mPressSound;
    SoundCue mDisabledPressSound;
    SoundCue mActionSound;
    SoundCue mToggleOnSound;
    SoundCue mToggleOffSound;
    SoundCue mFadeInSound;
    SoundCue mFadeOutSound;
    SoundCue mPrintingSound;
    float mStopSoundOnMouseOffDuration;
    float mFadeOpacity;
    float mFadeTarget;
    float mFadeSpeed;
    float mFadeDelay;
    float mFadeDelayMin;
    float mFadeDelayMax;
    float mFadeOutDelay;
    float mTextFadeTarget;
    float mScaleSpeed;
    float mPulseMin;
    float mPulseMax;
    float mPulseSpeed;
    float mMoveSpeed;
    float mMoveEaseIn;
    float mMoveEaseOut;
    float mShakeSpeed;
    float mShakeDistance;
    float mShakeDuration;
    float mShakeFalloffSpeed;
    float mColorChangeSpeed;
    float mWidthChangeSpeed;
    float mAcceleration;
    float mDeceleration;
    float mAmbient;
    float mFlashSpeed;
    float mFlashMin;
    float mFlashMax;
    float mFlashRed;
    float mFlashGreen;
    float mFlashBlue;
    float mShadowBlur;
    float mShadowOffsetX;
    float mShadowOffsetY;
    float mShadowRed;
    float mShadowGreen;
    float mShadowBlue;
    float mShadowAlpha;
    float mMarqueeSpeed;
    eastl::basic_string<char, eastl::allocator_forge> mMouseGraphicHover;
    eastl::basic_string<char, eastl::allocator_forge> mMouseHelpTextId;
    eastl::basic_string<char, eastl::allocator_forge> mMouseAlternateHelpTextId;
    int mMaxCursorRadius;
    float mCharacterFadeTime;
    float mCharacterFadeInterval;
    float mPeriodFadeInterval;
    float mColonFadeInterval;
    float mRepeatPeriodFadeInterval;
    float mCommaFadeInterval;
    float mQuestionFadeInterval;
    float mExclamationFadeInterval;
    float mCharacterIntervalMultiplier;
    float mCharacterFadeColorLag;
    float mCharacterFadeRed;
    float mCharacterFadeGreen;
    float mCharacterFadeBlue;
    float mHoverRadius;
    float mHoverInDuration;
    float mHoverOutDuration;
    float mHoverEndRed;
    float mHoverEndGreen;
    float mHoverEndBlue;
    float mHoverShimmerInfluence;
    float mHoverShimmerFrequency;
    float mHoverShimmerRed;
    float mHoverShimmerGreen;
    float mHoverShimmerBlue;
    float mRevealFxDuration;
    float mRevealFxPerCharScalar;
    float mRevealFxLineIndexScalar;
    float mRevealFxStartRed;
    float mRevealFxStartGreen;
    float mRevealFxStartBlue;
    float mRevealFxMidRed;
    float mRevealFxMidGreen;
    float mRevealFxMidBlue;
    float mRevealFxEndRed;
    float mRevealFxEndGreen;
    float mRevealFxEndBlue;
    eastl::vector<eastl::basic_string<char, eastl::allocator_forge>, eastl::allocator_forge> mConnections;
};
static_assert(sizeof(ComponentDataDef) == 0x760, "Incorrect SGG::ComponentDataDef size");
} // namespace SGG